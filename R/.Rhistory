p7 <- ggplot(Data) +
geom_point(aes(x=participant,y=MPQP, color = factor(condition)), position = position_jitterdodge())+
ggtitle("physical Makransky multimodal presence scale")
p8 <- ggplot(Data) +
geom_point(aes(x=participant,y=difficulty_s, color = factor(condition)), position = position_jitterdodge())+
ggtitle("Perceived difficulty")
p5 / p6
p7 / p8
# p8 <- ggplot(Data) +
#   geom_point(aes(x=participant,y=responseTSM_procustus, color = condition), position = position_jitterdodge())+
#   ggtitle("procustus-calibrated via smooth regression")
# p8
load(file = "Data.RData")
library(ggplot2)
library(patchwork)
p5 <- ggplot(Data) +
geom_point(aes(x=participant,y=WPQ, color = factor(condition)), position = position_jitterdodge())+
ggtitle("Witmer Presence questionnaire")
p6 <- ggplot(Data) +
geom_point(aes(x=participant,y=MPQS, color = factor(condition)), position = position_jitterdodge())+
ggtitle("social Makransky multimodal presence scale")
p7 <- ggplot(Data) +
geom_point(aes(x=participant,y=MPQP, color = factor(condition)), position = position_jitterdodge())+
ggtitle("physical Makransky multimodal presence scale")
p8 <- ggplot(Data) +
geom_point(aes(x=participant,y=difficulty_s, color = factor(condition)), position = position_jitterdodge())+
ggtitle("Perceived difficulty")
p5 / p6
p7 / p8
# p8 <- ggplot(Data) +
#   geom_point(aes(x=participant,y=responseTSM_procustus, color = condition), position = position_jitterdodge())+
#   ggtitle("procustus-calibrated via smooth regression")
# p8
load(file = "Results/BF_model_comparison_procustus0M.RData")
load(file = "Results/BF_model_comparison_sparc0M.RData")
print(paste("Bayes factor in favor of model_1 over model_2 (procutus0M): ", BF_model_comparison_procustus0M$bf ))
print(paste("Bayes factor in favor of model_1 over model_2 (sparc0M): ", BF_model_comparison_sparc0M$bf ))
load(file = "Results/BF_model_comparison_procustus1M.RData")
load(file = "Results/BF_model_comparison_sparc1M.RData")
load(file = "Results/post_analysis_procustus0M.RData")
load(file = "Results/post_analysis_sparc0M.RData")
post_analysis_procustus0M
post_analysis_sparc0M
load(file = "Results/post_analysis_procustus1M.RData")
load(file = "Results/post_analysis_sparc1M.RData")
post_analysis_procustus1M
post_analysis_sparc1M
load(file = "Results/hypothesis_test_procustus0M.RData")
load(file = "Results/hypothesis_test_sparc0M.RData")
hypothesis_test_procustus0M[[1]][,1]
hypothesis_test_procustus0M[[1]][,-1]
hypothesis_test_procustus0M[[2]]
hypothesis_test_sparc0M[[1]][,1]
hypothesis_test_sparc0M[[1]][,-1]
hypothesis_test_sparc0M[[2]]
load(file = "Results/hypothesis_test_procustus1M.RData")
load(file = "Results/hypothesis_test_sparc1M.RData")
hypothesis_test_procustus1M[[1]][,1]
hypothesis_test_procustus1M[[1]][,-1]
hypothesis_test_procustus1M[[2]]
hypothesis_test_sparc1M[[1]][,1]
hypothesis_test_sparc1M[[1]][,-1]
hypothesis_test_sparc1M[[2]]
load(file = "Results/BF_model_comparison_WPQ_0M.RData")
load(file = "Results/BF_model_comparison_MPQS_0M.RData")
load(file = "Results/BF_model_comparison_MPQP_0M.RData")
load(file = "Results/BF_model_comparison_Difficulty_0M.RData")
print(paste("Bayes factor in favor of model_3 over model_4 (WPQ_0M): ", BF_model_comparison_WPQ_0M ))
print(paste("Bayes factor in favor of model_3 over model_4 (MPQS_0M): ", BF_model_comparison_MPQS_0M ))
print(paste("Bayes factor in favor of model_3 over model_4 (MPQP_0M): ", BF_model_comparison_MPQP_0M ))
print(paste("Bayes factor in favor of model_3 over model_4 (Difficulty_OM): ", BF_model_comparison_Difficulty_0M ))
load(file = "Results/BF_model_comparison_WPQ_1M.RData")
load(file = "Results/BF_model_comparison_MPQS_1M.RData")
load(file = "Results/BF_model_comparison_MPQP_1M.RData")
load(file = "Results/BF_model_comparison_Difficulty_1M.RData")
print(paste("Bayes factor in favor of model_3 over model_4 (WPQ_1M): ", BF_model_comparison_WPQ_1M ))
print(paste("Bayes factor in favor of model_3 over model_4 (MPQS_1M): ", BF_model_comparison_MPQS_1M ))
print(paste("Bayes factor in favor of model_3 over model_4 (MPQP_1M): ", BF_model_comparison_MPQP_1M ))
print(paste("Bayes factor in favor of model_3 over model_4 (Difficulty_1M): ", BF_model_comparison_Difficulty_1M ))
load(file = "Results/post_analysis_procustus_basicWPQ.RData")
load(file = "Results/post_analysis_procustus_basicMPQS.RData")
load(file = "Results/post_analysis_procustus_basicMPQP.RData")
#load(file = "Results/post_analysis_procustus_basicDifficulty.RData")
post_analysis_procustus_basicWPQ
post_analysis_procustus_basicMPQS
post_analysis_procustus_basicMPQP
#post_analysis_procustus_basicDifficulty
load(file = "Results/Contrast_WPQ.RData")
knitr::opts_chunk$set(echo = TRUE)
# cohen = .5
run_model_cmdstanr <- function(Data, form, fam, priors){
print(paste(form[1],fam,sep="\n"))
fit <- brm(data = Data,
formula = form,
family = fam,
prior = priors,
iter = 6000, warmup = 2000,
control = list(adapt_delta = 0.96,  max_treedepth = 12),
#init = 0,
#thin = 2,
chains = 2,
backend = "cmdstanr",
threads = threading(45) ,
# save_pars = save_pars(all = TRUE),
#
sample_prior = TRUE ,
refresh = 0,
silent = 2
#file = filen
)
return(fit)
}
# hier nog de creatie van de dataset
condition1 <- rnorm(total/2,0.5,1) %>% data.frame(condition.value = .) #%>% mutate(condition.name = "condition1")
m_diff = 0.3
condition1 <- rnorm(total/2,m_diff,1) %>% data.frame(condition.value = .) #%>% mutate(condition.name = "condition1")
Score <- data.frame()
#Parti <- data.frame()
nParti <- c(5, 10, 11, 15, 20, 25, 30) # number participants
sdParti <- c(0.25) # sd participants
mDiff <- c(0, 0.1, 0.2, 0.3, 0.4, 0.5) # for calculatingCohen's d
# 1. Initialize
## Create dataset
n_condition = 2
n_participant = 11
n_trial = 4
sd_participant = .25
total = n_condition * n_participant * n_trial
condition1 <- rnorm(total/2,0.2,1) %>% data.frame(condition.value = .)
condition2 <- rnorm(total/2,0,1) %>% data.frame(condition.value = .)
condition <- rbind(condition1,condition2)
cohend = 0.2 /sd(condition$condition.value)
print(paste("cohend",cohend))
# dit kan beter door elke participant ook conditioneel te maken tov conditie
participant <- rnorm(total,0,sd_participant) %>% data.frame(participant.value = .)
trial <- rnorm(total,0,0.1 ) %>% data.frame(trial.value = .)
gr_value <- cbind(condition,participant,trial) %>% data.frame()
gr_name <- expand_grid(c("c1","c2"),factor(c(1:n_participant)),factor(c(1:n_trial)))  %>% data.frame()
names(gr_name) <- c("condition.name","participant.name","trial.name")
gr <- cbind(gr_value,gr_name)
sim_dataset <- gr %>% mutate(response = condition.value + participant.value + trial.value)
sim_dataset <- sim_dataset %>% mutate(condition.name = factor(condition.name),
participant.name = factor(participant.name),
trial.name = factor(trial.name))
sim_form <- bf(response ~ 0 + condition.name + (1 | participant.name + trial.name))
sim_prior <- c(brms::prior(normal(0.001, .3), class = "b"))
fit <- run_model_cmdstanr(sim_dataset,sim_form,"gaussian",sim_prior)
# 2. Simulation
nParti <- c(5, 10, 11, 15, 20, 25, 30) # number participants
sdParti <- c(0.25) # sd participants
mDiff <- c(0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6) # for calculatingCohen's d
for (mDiff_loop in mDiff){ # test for different Cohen's d
for (sdParti_loop in sdParti){ # test different standard deviations for participants
for (nParti_loop in nParti){ # test different number of participants
for (loop in 1:500){
print(paste("-->> n_participant=",nParti_loop, "-- loop", loop))
total = 2 * nParti_loop * 4
condition1 <- rnorm(total/2,mDiff_loop,1) %>% data.frame(condition.value = .)
condition2 <- rnorm(total/2,0,1) %>% data.frame(condition.value = .)
condition <- rbind(condition1,condition2)
cohend = mDiff_loop /sd(condition$condition.value)
# dit kan beter door elke participant ook conditioneel te maken tov conditie
participant <- rnorm(total,0,sdParti_loop) %>% data.frame(participant.value = .)
trial <- rnorm(total,0,0.1 ) %>% data.frame(trial.value = .)
gr_value <- cbind(condition,participant,trial) %>% data.frame()
gr_name <- expand_grid(c("c1","c2"),factor(c(1:nParti_loop)),factor(c(1:n_trial)))  %>% data.frame()
names(gr_name) <- c("condition.name","participant.name","trial.name")
gr <- cbind(gr_value,gr_name)
sim_dataset <- gr %>% mutate(response = condition.value + participant.value + trial.value)
sim_dataset <- sim_dataset %>% mutate(condition.name = factor(condition.name),
participant.name = factor(participant.name),
trial.name = factor(trial.name))
sim_model <-  update(fit,newdata = sim_dataset)
h <- hypothesis(sim_model,c("b_condition.namec1 > b_condition.namec2") ,class = NULL)$hypothesis
score <- ifelse(h[7] > 0.95,1,0) %>% data.frame()
names(score) ="score"
hh <- cbind(h,score)
print(paste("-------->> score = ", score,
"nParti =", nParti_loop,
"sdParti = ", sdParti_loop,
"mDiff = ",mDiff_loop,
"cohend = ", cohend))  #the real Dohen d
Score <- rbind(Score,cbind(hh, nParti_loop, sdParti_loop, mDiff_loop, cohend))
}
} # p_loop
} #sd_loop
} #d_loop
# simulation 1
nParti <- c(5, 10, 11, 15, 20, 25, 30) # number participants
sdParti <- c(0.25) # sd participants
mDiff <- c(0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6) # for calculatingCohen's d
Info <- list(Cohen_d = 0.5, nParti = nParti, sdParti = sdParti)
ScoreWithInfo = list(Score,Info)
save(file = "Fit/PowerAnalyse03_ScoreWithInfo",ScoreWithInfo)
Score <- ScoreWithInfo[[1]]
nParti <- c(5, 10, 11, 15, 20, 25, 30) # number participants
sdParti <- c(0.25) # sd participants
mDiff <- c(0, 0.1, 0.2, 0.3, 0.4, 0.5) # for calculatingCohen's d
Info <- list(nParti = nParti, sdParti = sdParti, mDiff = mDiff)
ScoreWithInfo = list(Score,Info)
save(file = "Fit/PowerAnalyse03_ScoreWithInfo",ScoreWithInfo)
Score <- ScoreWithInfo[[1]]
Score <- ScoreWithInfo[[1]] %>% data.frame() %>% filter(!(p_loop == c(11)) )
Res0 <- Score %>% filter(!(nParti_loop == 11)) %>% group_by(nParti_loop,sdParti_loop,mDiff_loop) %>% summarize(s = mean(score))
po0 <- ggplot(Res0,aes(x=nParti_loop,y=s,color=factor(mDiff_loop)) ) +
geom_point(position = position_jitter(width=.1)) +
labs(color = "D") +
geom_line() +
geom_vline(xintercept = 11, linetype = 2, color = "red") +
xlab("Number of participants") +
ylab("Power") +
theme_bw() +
ggtitle("Power analysis")
po0
make_fig("FiguresPaper/PowerAnalysis03",po0)
po1 <- ggplot(Res0,aes(x=nParti_loop,y=s,color=factor(mDiff_loop))) +
# geom_point(position = position_jitter()) +
# stat_lineribbon() +
stat_summary(fun.y = mean, geom = "point") +
stat_summary(fun.data = mean_hdci, geom = "errorbar")+
geom_vline(xintercept = 11, linetype = 2, color = "red") +
xlab("Number of participants") +
ylab("Power c1 < c2") +
theme_bw() +
ggtitle("Power analysiss")
po1
po2 <- ggplot(Res0,aes(x=mDiff_loop,y=s,color=factor(nParti_loop))) +
geom_point(position = position_jitter(width = .01)) +
geom_line() +
#geom_vline(xintercept = 11, linetype = 2, color = "red") +
xlab("Cohen's d") +
ylab("Power c1 < c2") +
theme_bw() +
ggtitle("Power analysiss")
po2
Score <- data.frame()
#Parti <- data.frame()
nParti <- c(5, 10, 11, 15, 20, 25, 30) # number participants
sdParti <- c(0.25) # sd participants
mDiff <- c(0, 0.1, 0.2, 0.3, 0.4, 0.5) # for calculatingCohen's d
# 1. Initialize
## Create dataset
n_condition = 2
n_participant = 11
n_trial = 4
sd_participant = .25
total = n_condition * n_participant * n_trial
condition1 <- rnorm(total/2,0.2,1) %>% data.frame(condition.value = .)
condition2 <- rnorm(total/2,0,1) %>% data.frame(condition.value = .)
condition <- rbind(condition1,condition2)
cohend = 0.2 /sd(condition$condition.value)
print(paste("cohend",cohend))
# dit kan beter door elke participant ook conditioneel te maken tov conditie
participant <- rnorm(total,0,sd_participant) %>% data.frame(participant.value = .)
trial <- rnorm(total,0,0.1 ) %>% data.frame(trial.value = .)
gr_value <- cbind(condition,participant,trial) %>% data.frame()
gr_name <- expand_grid(c("c1","c2"),factor(c(1:n_participant)),factor(c(1:n_trial)))  %>% data.frame()
names(gr_name) <- c("condition.name","participant.name","trial.name")
gr <- cbind(gr_value,gr_name)
sim_dataset <- gr %>% mutate(response = condition.value + participant.value + trial.value)
sim_dataset <- sim_dataset %>% mutate(condition.name = factor(condition.name),
participant.name = factor(participant.name),
trial.name = factor(trial.name))
sim_form <- bf(response ~ 0 + condition.name + (1 | participant.name + trial.name))
sim_prior <- c(brms::prior(normal(0.001, .3), class = "b"))
fit <- run_model_cmdstanr(sim_dataset,sim_form,"gaussian",sim_prior)
# 2. Simulation
nParti <- c(5, 10, 11, 15, 20, 25, 30) # number participants
sdParti <- c(0.25) # sd participants
mDiff <- c(0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6) # for calculatingCohen's d
for (mDiff_loop in mDiff){ # test for different Cohen's d
for (sdParti_loop in sdParti){ # test different standard deviations for participants
for (nParti_loop in nParti){ # test different number of participants
for (loop in 1:5){
print(paste("-->> n_participant=",nParti_loop, "-- loop", loop))
total = 2 * nParti_loop * 4
condition1 <- rnorm(total/2,mDiff_loop,1) %>% data.frame(condition.value = .)
condition2 <- rnorm(total/2,0,1) %>% data.frame(condition.value = .)
condition <- rbind(condition1,condition2)
cohend = mDiff_loop /sd(condition$condition.value)
# dit kan beter door elke participant ook conditioneel te maken tov conditie
participant <- rnorm(total,0,sdParti_loop) %>% data.frame(participant.value = .)
trial <- rnorm(total,0,0.1 ) %>% data.frame(trial.value = .)
gr_value <- cbind(condition,participant,trial) %>% data.frame()
gr_name <- expand_grid(c("c1","c2"),factor(c(1:nParti_loop)),factor(c(1:n_trial)))  %>% data.frame()
names(gr_name) <- c("condition.name","participant.name","trial.name")
gr <- cbind(gr_value,gr_name)
sim_dataset <- gr %>% mutate(response = condition.value + participant.value + trial.value)
sim_dataset <- sim_dataset %>% mutate(condition.name = factor(condition.name),
participant.name = factor(participant.name),
trial.name = factor(trial.name))
sim_model <-  update(fit,newdata = sim_dataset)
h <- hypothesis(sim_model,c("b_condition.namec1 > b_condition.namec2") ,class = NULL)$hypothesis
score <- ifelse(h[7] > 0.95,1,0) %>% data.frame()
names(score) ="score"
hh <- cbind(h,score)
print(paste("-------->> score = ", score,
"nParti =", nParti_loop,
"sdParti = ", sdParti_loop,
"mDiff = ",mDiff_loop,
"cohend = ", cohend))  #the real Dohen d
Score <- rbind(Score,cbind(hh, nParti_loop, sdParti_loop, mDiff_loop, cohend))
}
} # p_loop
} #sd_loop
} #d_loop
Score <- data.frame()
#Parti <- data.frame()
nParti <- c(5)#, 10, 11, 15, 20, 25, 30) # number participants
sdParti <- c(0.25) # sd participants
mDiff <- c(0, 0.1)#, 0.2, 0.3, 0.4, 0.5) # for calculatingCohen's d
# 1. Initialize
## Create dataset
n_condition = 2
n_participant = 11
n_trial = 4
sd_participant = .25
total = n_condition * n_participant * n_trial
condition1 <- rnorm(total/2,0.2,1) %>% data.frame(condition.value = .)
condition2 <- rnorm(total/2,0,1) %>% data.frame(condition.value = .)
condition <- rbind(condition1,condition2)
cohend = 0.2 /sd(condition$condition.value)
print(paste("cohend",cohend))
# dit kan beter door elke participant ook conditioneel te maken tov conditie
participant <- rnorm(total,0,sd_participant) %>% data.frame(participant.value = .)
trial <- rnorm(total,0,0.1 ) %>% data.frame(trial.value = .)
gr_value <- cbind(condition,participant,trial) %>% data.frame()
gr_name <- expand_grid(c("c1","c2"),factor(c(1:n_participant)),factor(c(1:n_trial)))  %>% data.frame()
names(gr_name) <- c("condition.name","participant.name","trial.name")
gr <- cbind(gr_value,gr_name)
sim_dataset <- gr %>% mutate(response = condition.value + participant.value + trial.value)
sim_dataset <- sim_dataset %>% mutate(condition.name = factor(condition.name),
participant.name = factor(participant.name),
trial.name = factor(trial.name))
sim_form <- bf(response ~ 0 + condition.name + (1 | participant.name + trial.name))
sim_prior <- c(brms::prior(normal(0.001, .3), class = "b"))
fit <- run_model_cmdstanr(sim_dataset,sim_form,"gaussian",sim_prior)
# 2. Simulation
nParti <- c(5, 10, 11, 15, 20, 25, 30) # number participants
sdParti <- c(0.25) # sd participants
mDiff <- c(0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6) # for calculatingCohen's d
for (mDiff_loop in mDiff){ # test for different Cohen's d
for (sdParti_loop in sdParti){ # test different standard deviations for participants
for (nParti_loop in nParti){ # test different number of participants
for (loop in 1:5){
print(paste("-->> n_participant=",nParti_loop, "-- loop", loop))
total = 2 * nParti_loop * 4
condition1 <- rnorm(total/2,mDiff_loop,1) %>% data.frame(condition.value = .)
condition2 <- rnorm(total/2,0,1) %>% data.frame(condition.value = .)
condition <- rbind(condition1,condition2)
cohend = mDiff_loop /sd(condition$condition.value)
# dit kan beter door elke participant ook conditioneel te maken tov conditie
participant <- rnorm(total,0,sdParti_loop) %>% data.frame(participant.value = .)
trial <- rnorm(total,0,0.1 ) %>% data.frame(trial.value = .)
gr_value <- cbind(condition,participant,trial) %>% data.frame()
gr_name <- expand_grid(c("c1","c2"),factor(c(1:nParti_loop)),factor(c(1:n_trial)))  %>% data.frame()
names(gr_name) <- c("condition.name","participant.name","trial.name")
gr <- cbind(gr_value,gr_name)
sim_dataset <- gr %>% mutate(response = condition.value + participant.value + trial.value)
sim_dataset <- sim_dataset %>% mutate(condition.name = factor(condition.name),
participant.name = factor(participant.name),
trial.name = factor(trial.name))
sim_model <-  update(fit,newdata = sim_dataset)
h <- hypothesis(sim_model,c("b_condition.namec1 > b_condition.namec2") ,class = NULL)$hypothesis
score <- ifelse(h[7] > 0.95,1,0) %>% data.frame()
names(score) ="score"
hh <- cbind(h,score)
print(paste("-------->> score = ", score,
"nParti =", nParti_loop,
"sdParti = ", sdParti_loop,
"mDiff = ",mDiff_loop,
"cohend = ", cohend))  #the real Dohen d
Score <- rbind(Score,cbind(hh, nParti_loop, sdParti_loop, mDiff_loop, cohend))
}
} # p_loop
} #sd_loop
} #d_loop
Score <- data.frame()
#Parti <- data.frame()
nParti <- c(5, 10, 11, 15, 20, 25, 30) # number participants
sdParti <- c(0.25) # sd participants
mDiff <- c(0, 0.1, 0.2, 0.3, 0.4, 0.5) # for calculatingCohen's d
# 1. Initialize
## Create dataset
n_condition = 2
n_participant = 11
n_trial = 4
sd_participant = .25
total = n_condition * n_participant * n_trial
condition1 <- rnorm(total/2,0.2,1) %>% data.frame(condition.value = .)
condition2 <- rnorm(total/2,0,1) %>% data.frame(condition.value = .)
condition <- rbind(condition1,condition2)
cohend = 0.2 /sd(condition$condition.value)
print(paste("cohend",cohend))
# dit kan beter door elke participant ook conditioneel te maken tov conditie
participant <- rnorm(total,0,sd_participant) %>% data.frame(participant.value = .)
trial <- rnorm(total,0,0.1 ) %>% data.frame(trial.value = .)
gr_value <- cbind(condition,participant,trial) %>% data.frame()
gr_name <- expand_grid(c("c1","c2"),factor(c(1:n_participant)),factor(c(1:n_trial)))  %>% data.frame()
names(gr_name) <- c("condition.name","participant.name","trial.name")
gr <- cbind(gr_value,gr_name)
sim_dataset <- gr %>% mutate(response = condition.value + participant.value + trial.value)
sim_dataset <- sim_dataset %>% mutate(condition.name = factor(condition.name),
participant.name = factor(participant.name),
trial.name = factor(trial.name))
sim_form <- bf(response ~ 0 + condition.name + (1 | participant.name + trial.name))
sim_prior <- c(brms::prior(normal(0.001, .3), class = "b"))
fit <- run_model_cmdstanr(sim_dataset,sim_form,"gaussian",sim_prior)
# 2. Simulation
nParti <- c(5, 10)#, 11, 15, 20, 25, 30) # number participants
sdParti <- c(0.25) # sd participants
mDiff <- c(0, 0.1)#, 0.2, 0.3, 0.4, 0.5, 0.6) # for calculatingCohen's d
for (mDiff_loop in mDiff){ # test for different Cohen's d
for (sdParti_loop in sdParti){ # test different standard deviations for participants
for (nParti_loop in nParti){ # test different number of participants
for (loop in 1:3){
print(paste("-->> n_participant=",nParti_loop, "-- loop", loop))
total = 2 * nParti_loop * 4
condition1 <- rnorm(total/2,mDiff_loop,1) %>% data.frame(condition.value = .)
condition2 <- rnorm(total/2,0,1) %>% data.frame(condition.value = .)
condition <- rbind(condition1,condition2)
cohend = mDiff_loop /sd(condition$condition.value)
# dit kan beter door elke participant ook conditioneel te maken tov conditie
participant <- rnorm(total,0,sdParti_loop) %>% data.frame(participant.value = .)
trial <- rnorm(total,0,0.1 ) %>% data.frame(trial.value = .)
gr_value <- cbind(condition,participant,trial) %>% data.frame()
gr_name <- expand_grid(c("c1","c2"),factor(c(1:nParti_loop)),factor(c(1:n_trial)))  %>% data.frame()
names(gr_name) <- c("condition.name","participant.name","trial.name")
gr <- cbind(gr_value,gr_name)
sim_dataset <- gr %>% mutate(response = condition.value + participant.value + trial.value)
sim_dataset <- sim_dataset %>% mutate(condition.name = factor(condition.name),
participant.name = factor(participant.name),
trial.name = factor(trial.name))
sim_model <-  update(fit,newdata = sim_dataset)
h <- hypothesis(sim_model,c("b_condition.namec1 > b_condition.namec2") ,class = NULL)$hypothesis
score <- ifelse(h[7] > 0.95,1,0) %>% data.frame()
names(score) ="score"
hh <- cbind(h,score)
print(paste("-------->> score = ", score,
"nParti =", nParti_loop,
"sdParti = ", sdParti_loop,
"mDiff = ",mDiff_loop,
"cohend = ", cohend))  #the real Dohen d
Score <- rbind(Score,cbind(hh, nParti_loop, sdParti_loop, mDiff_loop, cohend))
}
} # p_loop
} #sd_loop
} #d_loop
# simulation 1
nParti <- c(5, 10, 11, 15, 20, 25, 30) # number participants
sdParti <- c(0.25) # sd participants
mDiff <- c(0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6) # for calculatingCohen's d
Info <- list(Cohen_d = 0.5, nParti = nParti, sdParti = sdParti)
ScoreWithInfo = list(Score,Info)
save(file = "Fit/PowerAnalyse03_ScoreWithInfo",ScoreWithInfo)
Score <- ScoreWithInfo[[1]]
nParti <- c(5, 10, 11, 15, 20, 25, 30) # number participants
sdParti <- c(0.25) # sd participants
mDiff <- c(0, 0.1, 0.2, 0.3, 0.4, 0.5) # for calculatingCohen's d
Info <- list(nParti = nParti, sdParti = sdParti, mDiff = mDiff)
ScoreWithInfo = list(Score,Info)
save(file = "Fit/PowerAnalyse03_ScoreWithInfo",ScoreWithInfo)
Score <- ScoreWithInfo[[1]]
Score <- ScoreWithInfo[[1]] %>% data.frame() %>% filter(!(p_loop == c(11)) )
Res0 <- Score %>% filter(!(nParti_loop == 11)) %>% group_by(nParti_loop,sdParti_loop,mDiff_loop) %>% summarize(s = mean(score))
po0 <- ggplot(Res0,aes(x=nParti_loop,y=s,color=factor(mDiff_loop)) ) +
geom_point(position = position_jitter(width=.1)) +
labs(color = "D") +
geom_line() +
geom_vline(xintercept = 11, linetype = 2, color = "red") +
xlab("Number of participants") +
ylab("Power") +
theme_bw() +
ggtitle("Power analysis")
po0
make_fig("FiguresPaper/PowerAnalysis03",po0)
po1 <- ggplot(Res0,aes(x=nParti_loop,y=s,color=factor(mDiff_loop))) +
# geom_point(position = position_jitter()) +
# stat_lineribbon() +
stat_summary(fun.y = mean, geom = "point") +
stat_summary(fun.data = mean_hdci, geom = "errorbar")+
geom_vline(xintercept = 11, linetype = 2, color = "red") +
xlab("Number of participants") +
ylab("Power c1 < c2") +
theme_bw() +
ggtitle("Power analysiss")
po1
po2 <- ggplot(Res0,aes(x=mDiff_loop,y=s,color=factor(nParti_loop))) +
geom_point(position = position_jitter(width = .01)) +
geom_line() +
#geom_vline(xintercept = 11, linetype = 2, color = "red") +
xlab("Cohen's d") +
ylab("Power c1 < c2") +
theme_bw() +
ggtitle("Power analysiss")
po2
knitr::opts_chunk$set(echo = TRUE)
def.chunk.hook  <- knitr::knit_hooks$get("chunk")
knitr::knit_hooks$set(chunk = function(x, options) {
x <- def.chunk.hook(x, options)
ifelse(options$size != "normalsize", paste0("\n \\", options$size,"\n\n", x, "\n\n \\normalsize"), x)
})
knitr::opts_chunk$set(echo = TRUE)
def.chunk.hook  <- knitr::knit_hooks$get("chunk")
knitr::knit_hooks$set(chunk = function(x, options) {
x <- def.chunk.hook(x, options)
ifelse(options$size != "normalsize", paste0("\n \\", options$size,"\n\n", x, "\n\n \\normalsize"), x)
})
load(file = "Data.RData")
str(Data)
head(Data)
summary(Data)
